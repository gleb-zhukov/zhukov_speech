import os
import json
import ydb
import ydb.iam
import requests
from random import randint
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from telebot import types
#from dotenv import load_dotenv #remove in YC

#load_dotenv() #remove in YC

ydb_endpoint=os.getenv('YDB_ENDPOINT')
ydb_database=os.getenv('YDB_DATABASE')
#ydb_token=os.getenv('YDB_TOKEN') #remove in YC

#speechkit_token=os.getenv('SPEECHKIT_TOKEN')#remove in YC
speechkit_token = '' #use in YC

speechkit_folder_id = os.getenv('SPEECHKIT_FOLDER_ID')

tg_token = os.getenv('TG_TOKEN')

# Create driver in global space.
driver = ydb.Driver(
  endpoint=ydb_endpoint,
  database=ydb_database,
  #credentials=ydb.AccessTokenCredentials(ydb_token) #remove in YC
  credentials=ydb.iam.MetadataUrlCredentials() #use in YC
)
# Wait for the driver to become active for requests.
driver.wait(fail_fast=True, timeout=5)
session = driver.table_client.session().create()

bot = telebot.TeleBot(tg_token)

start_text = '—ç—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ–∑–≤—É—á–∏—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç.\n—Ä–∞–∑–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏ –∏ —Ä–∞–∑–Ω—ã–º–∏ –≥–æ–ª–æ—Å–∞–º–∏.\n\n' \
        '–¥–æ—Å—Ç—É–ø–Ω—ã –º—É–∂—Å–∫–∏–µ –∏ –∂–µ–Ω—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞, –≤ —Ä–∞–∑–Ω—ã—Ö –∞–º–ø–ª—É–∞.\n\n–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤:\n' \
        'üá∑üá∫ —Ä—É—Å—Å–∫–∏–π\nüá¨üáß –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\nüá©üá™ –Ω–µ–º–µ—Ü–∫–∏–π\nüá∞üáø –∫–∞–∑–∞—Ö—Å–∫–∏–π\nüá∫üáø —É–∑–±–µ–∫—Å–∫–∏–π\n\n' \
        '–ø–µ—Ä–µ—á–µ–Ω—å –≥–æ–ª–æ—Å–æ–≤, —è–∑—ã–∫–æ–≤, –∏ –ø—Ä–æ—á–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è.\n\n' \
        '–±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π. –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 300 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å.\n\n' \
        '—Å–æ–∑–¥–∞—Ç–µ–ª—å/–ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º @konstela\n–ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è: @zhukov_tech'

faq_text = '–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–¥–∞—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π ¬´+¬ª –ø–µ—Ä–µ–¥ —É–¥–∞—Ä–Ω–æ–π –≥–ª–∞—Å–Ω–æ–π. –Ω–∞–ø—Ä–∏–º–µ—Ä: –±+–æ–ª—å—à–∞—è, –±–æ–ª—å—à+–∞—è.\n' \
        '–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—É–∑ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–∏—Ä–µ ¬´-¬ª. –Ω–∞–ø—Ä–∏–º–µ—Ä: –º—ã - –ª—É—á—à–∏–µ.\n\n' \
        '–∑–Ω–∞–∫–æ–º ‚ö°Ô∏è –æ—Ç–º–µ—á–µ–Ω—ã –Ω–∞–∏–ª—É—á—à–∏–µ –ø–æ —Ç–µ–º–±—Ä—É, —ç–º–æ—Ü–∏—è–º, –∏–Ω—Ç–æ–Ω–∞—Ü–∏—è–º –∏ –∫–∞—á–µ—Å—Ç–≤—É –∑–≤—É—á–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞.\n\n' \
        '—Ç–∞–∫ –∫–∞–∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ—á–µ–≤–æ–π —Å–∏–Ω—Ç–µ–∑ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –Ω–µ–¥–µ—à–µ–≤–æ–µ - –º–Ω–µ –ø—Ä–∏—à–ª–æ—Å—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞ –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤.'

about_text = '–¥–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏.\n' \
'–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≥–æ–ª–æ—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∫–∞–∑–∞—Ö—Å–∫–æ–º –∏ —É–∑–±–µ–∫—Å–∫–æ–º —è–∑—ã–∫–∞—Ö, –≤–∫–ª—é—á–∞—è —Ä–∞–∑–Ω—ã–π –ø–æ–ª –∏ —Ä–∞–∑–Ω—ã–µ –∞–º–ø–ª—É–∞.\n\n' \
'–±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n\n' \
'–±–æ—Ç —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –æ–±–ª–∞—á–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.\n\n' \
'—Å–æ–∑–¥–∞—Ç–µ–ª—å/–ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @konstela\n–ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è: @zhukov_tech\n\n' \

send_text = '–≤—ã—à–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏. –Ω–∞–ø–æ–º–∏–Ω–∞—é, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –æ–±—ä–µ–º–æ–º –¥–æ 300 –∑–Ω–∞–∫–æ–≤.'

def check_spot(session, from_id): #–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫–∞–∫–æ–º –º–µ–Ω—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    result_sets = session.transaction().execute(
        f'select spot from user where id == {from_id}',
        commit_tx=True,
    )
    if not result_sets[0].rows: #–µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –Ω–µ—Ç: –¥–æ–±–∞–≤–ª—è–µ–º
        session.transaction().execute(f'upsert into user (id, spot) values ({userid}))', commit_tx=True)
        return 0
    else: #–∏–Ω–∞—á–µ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –µ—Å—Ç—å
      for row in result_sets[0].rows:
        user_spot = row.spot
        return user_spot
      
def update_spot(session, from_id, spot):
    session.transaction().execute(
        f'upsert into user (id, spot) values ({from_id}, {spot})', 
        commit_tx=True,
        )
    
def keyboard(key_type="start_menu"):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup = types.ReplyKeyboardMarkup(row_width=1)
    if key_type == "start_menu":
        markup.add(KeyboardButton("–ø—Ä–∏–º–µ—Ä—ã –≥–æ–ª–æ—Å–æ–≤"),KeyboardButton("–æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç"),KeyboardButton("faq"),KeyboardButton("–æ –±–æ—Ç–µ"))
    elif key_type == "voice_menu":
        markup.add(KeyboardButton("üá∑üá∫ RU: –ê–ª—ë–Ω–∞ ‚ö°Ô∏è"),
                   KeyboardButton("üá∑üá∫ RU: –ñ–µ–Ω—è"),
                   KeyboardButton("üá∑üá∫ RU: –ñ–µ–Ω—è (–¥–æ–±—Ä—ã–π) ‚ö°Ô∏è"),
                   KeyboardButton("üá∑üá∫ RU: –ú–∞—Ä–∏–Ω–∞"),
                   KeyboardButton("üá∑üá∫ RU: –ú–∞—Ä–∏–Ω–∞ (—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω—ã–π) ‚ö°Ô∏è"),
                   KeyboardButton("üá∑üá∫ RU: –ï—Ä–º–∏–ª ‚ö°Ô∏è"),
                   KeyboardButton("üá∑üá∫ RU: –§–∏–ª–∏–ø–ø"),
                   KeyboardButton("üá∑üá∫ RU: –ó–∞—Ö–∞—Ä"),
                   KeyboardButton("üá∑üá∫ RU: –†—É—Å–ª–∞–Ω"),
                   KeyboardButton("üá©üá™ DE: –õ–µ—è"),
                   KeyboardButton("üá¨üáß EN: –î–∂–æ–Ω"),
                   KeyboardButton("üá∞üáø KZ: –ú–∞–¥–∏"),
                   KeyboardButton("üá∞üáø KZ: –ê–º–∏—Ä–∞"),
                   KeyboardButton("üá∫üáø UZ: –ù–∏–≥–æ—Ä–∞"),
                   KeyboardButton("–Ω–∞–∑–∞–¥")
                   )
    else:
        markup.add(KeyboardButton("–ø—Ä–∏–º–µ—Ä—ã –≥–æ–ª–æ—Å–æ–≤"),KeyboardButton("–æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç"),KeyboardButton("faq"),KeyboardButton("–æ –±–æ—Ç–µ"))
    return markup

def speechkit_synth(speechkit_token, text, lang, voice, emotion=None):
   url = 'https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize'
   headers = {
       'Authorization': 'Bearer ' + speechkit_token,
   }

   data = {
       'text': text,
       'lang': lang,
       'voice': voice,
       'emotion': emotion,
       'format': 'mp3',
       'folderId': speechkit_folder_id
   }

   with requests.post(url, headers=headers, data=data, stream=True) as resp:
       if resp.status_code != 200:
           raise RuntimeError("Invalid response received: code: %d, message: %s" % (resp.status_code, resp.text))

       for chunk in resp.iter_content(chunk_size=None):
           yield chunk

def synth(chat_id, text, lang, voice, emotion=None):
    random_numb = randint(0, 10000000)
    lenght = len(text)
    if lenght < 300:
        with open(f'/tmp/{random_numb}_zhukov_speech.mp3', "wb") as f:
            for audio_content in speechkit_synth(speechkit_token, text, lang, voice, emotion):
                f.write(audio_content)
        bot.send_document(chat_id, open(f'/tmp/{random_numb}_zhukov_speech.mp3', 'rb'))
        update_spot(session, chat_id, 0)
        bot.send_message(chat_id,"–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è: @zhukov_tech",reply_markup=keyboard("start_menu"))
    else:
        bot.send_message(chat_id, f'—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤. —É —Ç–µ–±—è - {lenght}, –Ω—É–∂–Ω–æ –º–µ–Ω–µ–µ 300.')

@bot.message_handler(commands=["start"]) #–µ—Å–ª–∏ —é–∑–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
def start_message(message):
    if message.from_user.id != 321588402:
        bot.send_message(message.from_user.id,"–±–æ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è: @zhukov_tech")
        return
    spot = 0 #–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º–µ–Ω—é 0
    session.transaction().execute(
     f'upsert into user (id, spot) values ({message.from_user.id}, {spot})', 
     commit_tx=True,
     ) #–¥–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ –±–∞–∑—É
    bot.send_message(message.chat.id, start_text, reply_markup=keyboard())

@bot.message_handler(func=lambda message:True)
def all_messages(message):
    if message.from_user.id != 321588402:
        bot.send_message(message.from_user.id,"–±–æ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è: @zhukov_tech")
        return
    spot = check_spot(session, message.from_user.id)
    if message.text == "–Ω–∞–∑–∞–¥":
        update_spot(session, message.from_user.id, 0) #spot 0 (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
        bot.send_message(message.from_user.id,"–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è: @zhukov_tech",reply_markup=keyboard("start_menu"))
        return
    if spot == 0:    
        if message.text == "–ø—Ä–∏–º–µ—Ä—ã –≥–æ–ª–æ—Å–æ–≤":
            update_spot(session, message.from_user.id, 1) #spot 1 (–º–µ–Ω—é —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è)
            bot.send_message(message.from_user.id, "–≤—ã–±–µ—Ä–∏ –≥–æ–ª–æ—Å –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n\n‚ö°Ô∏è - –Ω–∞–∏–ª—É—á—à–∏–µ –≥–æ–ª–æ—Å–∞",reply_markup=keyboard("voice_menu"))
            return
        elif message.text == "–æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç":
            update_spot(session, message.from_user.id, 2) #spot 2 (–º–µ–Ω—é —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è)
            bot.send_message(message.from_user.id, "–≤—ã–±–µ—Ä–∏ –≥–æ–ª–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–∑–≤—É—á–∏–≤–∞—Ç—å —Ç–≤–æ–π —Ç–µ–∫—Å—Ç\n\n‚ö°Ô∏è - –Ω–∞–∏–ª—É—á—à–∏–µ –≥–æ–ª–æ—Å–∞",reply_markup=keyboard("voice_menu"))
            return
        elif message.text == "faq":
            bot.send_message(message.from_user.id, faq_text)
            return
        elif message.text == "–æ –±–æ—Ç–µ":
            bot.send_message(message.from_user.id, about_text)
            return
    elif spot == 1 or spot == 2:
        if message.text == "üá∑üá∫ RU: –ê–ª—ë–Ω–∞ ‚ö°Ô∏è":
            if spot == 1: 
                bot.send_message(message.from_user.id, '–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä –≥–æ–ª–æ—Å–∞ –ê–ª—ë–Ω–∞')
                return
            else:
                update_spot(session, message.from_user.id, 3) #spot 3 (–≥–æ–ª–æ—Å –ê–ª—ë–Ω–∞)
                bot.send_message(message.from_user.id, send_text, reply_markup=types.ReplyKeyboardRemove(selective=False))
                return
        elif message.text == "üá∑üá∫ RU: –ñ–µ–Ω—è":
            if spot == 1:
                bot.send_message(message.from_user.id, '–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä –≥–æ–ª–æ—Å–∞ –î–∂–µ–π–Ω')
                return
            else:
                update_spot(session, message.from_user.id, 4) #spot 4 (–≥–æ–ª–æ—Å –î–∂–µ–π–Ω)
                bot.send_message(message.from_user.id, send_text, reply_markup=types.ReplyKeyboardRemove(selective=False))
                return
        elif message.text == "üá∑üá∫ RU: –ñ–µ–Ω—è (–¥–æ–±—Ä—ã–π) ‚ö°Ô∏è":
            if spot == 1:
                bot.send_message(message.from_user.id, '–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä –¥–æ–±—Ä–æ–≥–æ –≥–æ–ª–æ—Å–∞ –î–∂–µ–π–Ω')
                return
            else:
                update_spot(session, message.from_user.id, 5) #spot 5 (–¥–æ–±—Ä—ã–π –≥–æ–ª–æ—Å –î–∂–µ–π–Ω)
                bot.send_message(message.from_user.id, send_text, reply_markup=types.ReplyKeyboardRemove(selective=False))
                return
        elif message.text == "üá∑üá∫ RU: –ú–∞—Ä–∏–Ω–∞":
            if spot == 1:
                bot.send_message(message.from_user.id, '–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä –≥–æ–ª–æ—Å–∞ –ú–∞—Ä–∏–Ω–∞')
                return
            else:
                update_spot(session, message.from_user.id, 6) #spot 6 (–≥–æ–ª–æ—Å –û–º–∞–∂)
                bot.send_message(message.from_user.id, send_text, reply_markup=types.ReplyKeyboardRemove(selective=False))
                return
        elif message.text == "üá∑üá∫ RU: –ú–∞—Ä–∏–Ω–∞ (—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω—ã–π) ‚ö°Ô∏è":
            if spot == 1:
                bot.send_message(message.from_user.id, '–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ –ú–∞—Ä–∏–Ω–∞')
                return
            else:
                update_spot(session, message.from_user.id, 7) #spot 7 (—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å –û–º–∞–∂)
                bot.send_message(message.from_user.id, send_text, reply_markup=types.ReplyKeyboardRemove(selective=False))
                return
        elif message.text == "üá∑üá∫ RU: –ï—Ä–º–∏–ª ‚ö°Ô∏è":
            if spot == 1:
                bot.send_message(message.from_user.id, '–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä –¥–æ–±—Ä–æ–≥–æ –≥–æ–ª–æ—Å–∞ –ï—Ä–º–∏–ª')
                return
            else:
                update_spot(session, message.from_user.id, 8) #spot 8 (–≥–æ–ª–æ—Å –ï—Ä–º–∏–ª)
                bot.send_message(message.from_user.id, send_text, reply_markup=types.ReplyKeyboardRemove(selective=False))
                return
        elif message.text == "üá∑üá∫ RU: –§–∏–ª–∏–ø–ø":
            if spot == 1:
                bot.send_message(message.from_user.id, '–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä –≥–æ–ª–æ—Å–∞ –§–∏–ª–∏–ø–ø')
                return
            else:
                update_spot(session, message.from_user.id, 9) #spot 9 (–≥–æ–ª–æ—Å –§–∏–ª–∏–ø–ø)
                bot.send_message(message.from_user.id, send_text, reply_markup=types.ReplyKeyboardRemove(selective=False))
                return
        elif message.text == "üá∑üá∫ RU: –ó–∞—Ö–∞—Ä":
            if spot == 1:
                bot.send_message(message.from_user.id, '–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä –≥–æ–ª–æ—Å–∞ –ó–∞—Ö–∞—Ä')
                return
            else:
                update_spot(session, message.from_user.id, 10) #spot 10 (–≥–æ–ª–æ—Å –ó–∞—Ö–∞—Ä)
                bot.send_message(message.from_user.id, send_text, reply_markup=types.ReplyKeyboardRemove(selective=False))
                return
        elif message.text == "üá∑üá∫ RU: –†—É—Å–ª–∞–Ω":
            if spot == 1:
                bot.send_message(message.from_user.id, '–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä –≥–æ–ª–æ—Å–∞ –†—É—Å–ª–∞–Ω')
                return
            else:
                update_spot(session, message.from_user.id, 11) #spot 11 (–≥–æ–ª–æ—Å –ú–∞–¥–∏—Ä—É—Å)
                bot.send_message(message.from_user.id, send_text, reply_markup=types.ReplyKeyboardRemove(selective=False))
                return
        elif message.text == "üá©üá™ DE: –õ–µ—è":
            if spot == 1:
                bot.send_message(message.from_user.id, '–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä –≥–æ–ª–æ—Å–∞ –õ–µ—è')
                return
            else:
                update_spot(session, message.from_user.id, 12) #spot 12 (–≥–æ–ª–æ—Å –õ–µ—è)
                bot.send_message(message.from_user.id, send_text, reply_markup=types.ReplyKeyboardRemove(selective=False))
                return
        elif message.text == "üá¨üáß EN: –î–∂–æ–Ω":
            if spot == 1:
                bot.send_message(message.from_user.id, '–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä –≥–æ–ª–æ—Å–∞ –î–∂–æ–Ω')
                return
            else:
                update_spot(session, message.from_user.id, 13) #spot 13 (–≥–æ–ª–æ—Å –î–∂–æ–Ω)
                bot.send_message(message.from_user.id, send_text, reply_markup=types.ReplyKeyboardRemove(selective=False))
                return
        elif message.text == "üá∞üáø KZ: –ú–∞–¥–∏":
            if spot == 1:
                bot.send_message(message.from_user.id, '–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä –≥–æ–ª–æ—Å–∞ –ú–∞–¥–∏')
                return
            else:
                update_spot(session, message.from_user.id, 14) #spot 14 (–≥–æ–ª–æ—Å –ú–∞–¥–∏)
                bot.send_message(message.from_user.id, send_text, reply_markup=types.ReplyKeyboardRemove(selective=False))
                return
        elif message.text == "üá∞üáø KZ: –ê–º–∏—Ä–∞":
            if spot == 1:
                bot.send_message(message.from_user.id, '–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä –≥–æ–ª–æ—Å–∞ –ê–º–∏—Ä–∞')
                return
            else:
                update_spot(session, message.from_user.id, 15) #spot 15(–≥–æ–ª–æ—Å –ê–º–∏—Ä–∞)
                bot.send_message(message.from_user.id, send_text, reply_markup=types.ReplyKeyboardRemove(selective=False))
                return
        elif message.text == "üá∫üáø UZ: –ù–∏–≥–æ—Ä–∞":
            if spot == 1:
                bot.send_message(message.from_user.id, '–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä –≥–æ–ª–æ—Å–∞ –ù–∏–≥–æ—Ä–∞')
                return
            else:
                update_spot(session, message.from_user.id, 16) #spot 16 (–≥–æ–ª–æ—Å –ù–∏–≥–æ—Ä–∞)
                bot.send_message(message.from_user.id, send_text, reply_markup=types.ReplyKeyboardRemove(selective=False))
                return
    elif spot == 3:
        synth(message.from_user.id, message.text, 'ru-RU', 'alena')
        return
    elif spot == 4:
        synth(message.from_user.id, message.text, 'ru-RU', 'jane')
        return
    elif spot == 5:
        synth(message.from_user.id, message.text, 'ru-RU', 'jane', 'good')
        return
    elif spot == 6:
        synth(message.from_user.id, message.text, 'ru-RU', 'omazh')
        return
    elif spot == 7:
        synth(message.from_user.id, message.text, 'ru-RU', 'omazh', 'evil')
        return
    elif spot == 8:
        synth(message.from_user.id, message.text, 'ru-RU', 'ermil')
        return
    elif spot == 9:
        synth(message.from_user.id, message.text, 'ru-RU', 'filipp')
        return
    elif spot == 10:
        synth(message.from_user.id, message.text, 'ru-RU', 'zahar')
        return
    elif spot == 11:
        synth(message.from_user.id, message.text, 'ru-RU', 'madirus')
        return
    elif spot == 12:
        synth(message.from_user.id, message.text, 'de-DE', 'lea')
        return
    elif spot == 13:
        synth(message.from_user.id, message.text, 'en-US', 'john')
        return
    elif spot == 14:
        synth(message.from_user.id, message.text, 'kk-KK', 'madi')
        return
    elif spot == 15:
        synth(message.from_user.id, message.text, 'kk-KK', 'amira')
        return
    elif spot == 16:
        synth(message.from_user.id, message.text, 'uz-UZ', 'nigora')
        return
    
#bot.infinity_polling() #remove in YC

# Cloud Function Handler
def handler(event,context):
    global speechkit_token
    speechkit_token = context.token["access_token"]
    body = json.loads(event['body'])
    update = telebot.types.Update.de_json(body)
    bot.process_new_updates([update])
    return {
    'statusCode': 200,
    'body': 'ok',
    }
